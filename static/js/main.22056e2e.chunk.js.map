{"version":3,"sources":["component/select/Select.js","App.js","serviceWorker.js","index.js"],"names":["Select","memo","props","options","propSelectedOption","selectedOption","onOptionChange","useState","setSelectedOption","selectedStyle","backgroundColor","value","onChange","e","target","map","o","key","defaultValue","style","App","data","setData","pageLangueges","setPageLanguages","navigator","language","userLanguage","substring","selectedLanguage","setSelectedLanguage","preSelectedLanguage","ref","useRef","useEffect","current","usePrevious","url","parsParams","action","pageid","format","inprop","Object","keys","forEach","fetch","then","response","json","parsedData","parse","langlinks","langLink","lang","catch","error","console","log","text","dangerouslySetInnerHTML","__html","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"0MAEaA,G,MAASC,gBAAK,SAACC,GAAW,IAC3BC,EAAgED,EAAhEC,QAAyBC,EAAuCF,EAAvDG,eAAoCC,EAAmBJ,EAAnBI,eADnB,EAEUC,mBAASH,GAFnB,mBAE3BC,EAF2B,KAEXG,EAFW,KAU5BC,EAAgB,CAClBC,gBAAiB,QAGrB,OAAO,6BACH,4BACIC,MAAON,EACPO,SAbgB,SAAAC,GACpB,IAAMF,EAAQE,EAAEC,OAAOH,MAEvBH,EAAkBG,GAClBL,EAAeK,KAYNR,EAAeA,EAAQY,KAAI,SAAAC,GAAC,OAAI,4BAC7BC,IAAKD,EACLL,MAAOK,EACPE,aAAcb,IAAmBW,EACjCG,MAAOd,IAAmBW,EAAIP,EAAgB,MAE7CO,MANM,SCmDZI,EAnEH,WAAO,IAAD,EACQb,mBAAS,MADjB,mBACTc,EADS,KACHC,EADG,OAE0Bf,mBAAS,MAFnC,mBAETgB,EAFS,KAEMC,EAFN,OAGgCjB,oBAAUkB,UAAUC,UAAYD,UAAUE,cAAcC,UAAU,EAAG,IAHrG,mBAGTC,EAHS,KAGSC,EAHT,KAWVC,EAPc,SAAApB,GAClB,IAAMqB,EAAMC,mBAIZ,OAHAC,qBAAU,WACRF,EAAIG,QAAUxB,KAETqB,EAAIG,QAEeC,CAAYP,GA+BxC,OA7BAK,qBAAU,WACR,IAAKb,GAAQU,GAAuBF,EAAkB,CACpD,IAAIQ,EAAM,WAAaR,EAAmB,2BAEtCS,EAAa,CACfC,OAAQ,QACRC,OAAQ,MACRC,OAAQ,OACRC,OAAQ,iBAGVL,GAAY,YACZM,OAAOC,KAAKN,GAAYO,SAAQ,SAAU5B,GAAOoB,GAAO,IAAMpB,EAAM,IAAMqB,EAAWrB,MAErF6B,MAAMT,GACHU,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACJ,IAAME,EAAaF,EAASG,MAE5B7B,EAAQ4B,GACH3B,GACHC,EAAiB,GAAD,mBAAK0B,EAAWE,UAAUrC,KAAI,SAAAsC,GAAQ,OAAIA,EAASC,SAAnD,CAA0D,WAE7EC,OAAM,SAAUC,GAASC,QAAQC,IAAIF,SAIzC,CAACnC,EAAMQ,IAEH,6BACL,6BACE,kBAAC7B,EAAD,CACEG,QAASoB,EACTjB,eAAgBwB,EAChBzB,eAAgBwB,KAKlBR,GAEA,6BAEIA,EAAKsC,MAELtC,EAAKsC,KAAK,MAEV,uBAAGC,wBAAyB,CAAEC,OAAQxC,EAAKsC,KAAK,WCtDtCG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmB9C,WACrBA,UAAU+C,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdpB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMoB,a","file":"static/js/main.22056e2e.chunk.js","sourcesContent":["import React, { memo, useState } from 'react';\r\n\r\nexport const Select = memo((props) => {\r\n    const { options, selectedOption: propSelectedOption, onOptionChange } = props;\r\n    const [selectedOption, setSelectedOption] = useState(propSelectedOption);\r\n\r\n    const onChangeHandler = e => {\r\n        const value = e.target.value;\r\n\r\n        setSelectedOption(value);\r\n        onOptionChange(value);\r\n    }\r\n    const selectedStyle = {\r\n        backgroundColor: 'blue'\r\n    }\r\n\r\n    return <div>\r\n        <select\r\n            value={selectedOption}\r\n            onChange={onChangeHandler}\r\n        >\r\n            {\r\n                !options ? [] : options.map(o => <option\r\n                    key={o}\r\n                    value={o}\r\n                    defaultValue={selectedOption === o}\r\n                    style={selectedOption === o ? selectedStyle : null}\r\n                >\r\n                    {o}\r\n                </option>)\r\n            }\r\n        </select>\r\n    </div>\r\n});","import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport { Select } from './component/select/Select';\n\n\n\nconst App = () => {\n  const [data, setData] = useState(null);\n  const [pageLangueges, setPageLanguages] = useState(null);\n  const [selectedLanguage, setSelectedLanguage] = useState((navigator.language || navigator.userLanguage).substring(0, 2));\n  const usePrevious = value => {\n    const ref = useRef();\n    useEffect(() => {\n      ref.current = value;\n    });\n    return ref.current;\n  }\n  const preSelectedLanguage = usePrevious(selectedLanguage);\n\n  useEffect(() => {\n    if (!data || preSelectedLanguage != selectedLanguage) {\n      var url = 'https://' + selectedLanguage + '.wikipedia.org/w/api.php';\n\n      var parsParams = {\n        action: 'parse',\n        pageid: 25523,\n        format: 'json',\n        inprop: \"varianttitles\"\n      };\n\n      url = url + '?origin=*';\n      Object.keys(parsParams).forEach(function (key) { url += '&' + key + '=' + parsParams[key]; });\n\n      fetch(url)\n        .then(response => response.json())\n        .then(response => {\n          const parsedData = response.parse;\n\n          setData(parsedData);\n          if (!pageLangueges)\n            setPageLanguages([...parsedData.langlinks.map(langLink => langLink.lang), 'en']);\n        })\n        .catch(function (error) { console.log(error); });\n    }\n\n\n  }, [data, selectedLanguage]);\n\n  return <div>\n    <div>\n      <Select\n        options={pageLangueges}\n        onOptionChange={setSelectedLanguage}\n        selectedOption={selectedLanguage}\n      />\n    </div>\n\n    {\n      data\n      &&\n      <div>\n        {\n          data.text\n          &&\n          data.text['*']\n          &&\n          <p dangerouslySetInnerHTML={{ __html: data.text['*'] }} />\n        }\n      </div>\n    }\n  </div>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}